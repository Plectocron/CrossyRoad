local tracker = game.ReplicatedStorage.Trackers
local remotes = game.ReplicatedStorage.Remotes
local coreFunctions = {}

coreFunctions.levelCounter = 1 -- level to assign to the newest template

coreFunctions.isCurrentlyLoading = false -- used as a debounce or cooldown against incoming calls to prevent stacking

coreFunctions.currentlyRefreshing = false

coreFunctions.playerLevel = 0 -- track user's level (highest DURING the game)

coreFunctions.startLoaded = false -- whether start was loaded or not

coreFunctions.firstTimeLoading = true -- used to detect if it's a player's first time loading

-- Boolean Manipulation Functions:
coreFunctions.clearingAllTemplatesBoolean = function()
	remotes.changeBooleanValueRemote:FireServer(tracker.Booleans.clearingAllTemplates, true)
end
coreFunctions.resetClearingAllTemplatesBoolean = function()
	remotes.changeBooleanValueRemote:FireServer(tracker.Booleans.clearingAllTemplates, false)
end
coreFunctions.playAgainButtonIsClickedBoolean = function()
	remotes.changeBooleanValueRemote:FireServer(tracker.Booleans.playAgainButtonIsClicked, true)
end
coreFunctions.resetPlayAgainButtonIsClickedBoolean = function()
	remotes.changeBooleanValueRemote:FireServer(tracker.Booleans.playAgainButtonIsClicked, false)
end
coreFunctions.playerIsDeadBoolean = function()
	remotes.changeBooleanValueRemote:FireServer(tracker.Booleans.playerIsDead, true)
end
coreFunctions.resetPlayerIsDeadBoolean = function()
	remotes.changeBooleanValueRemote:FireServer(tracker.Booleans.playerIsDead, false)
end

-- Template Manipulation:
coreFunctions.latestTemplateVector = Vector3.new(0,0,0) -- Position of the latest template created
coreFunctions.weldedTemplatesMade = false
coreFunctions.templatesReadyToSetUp = true
coreFunctions.highestTemplateLevel = 0 -- used to track the highest existing template
coreFunctions.templateBin = {} -- used to track which templates to delete
coreFunctions.templatesTable = {} -- used to sort all the existing templates
coreFunctions.clearTemplateBin = function() -- clears the template bin
	for index, templateToDelete in coreFunctions.templateBin do
		local templateIsInWorkspace = game.Workspace:FindFirstChild(templateToDelete.Name)
		local templateIsInTemplateTable = table.find(coreFunctions.templatesTable, templateToDelete)
		if templateIsInWorkspace then
			game.Workspace[templateToDelete.Name]:Destroy()
		end
		if templateIsInTemplateTable then
			table.remove(coreFunctions.templatesTable, table.find(coreFunctions.templatesTable,templateToDelete))
		end
		warn("a template has been deleted from the bin")
	end
	table.clear(coreFunctions.templateBin)
end
coreFunctions.loadTemplates = function(templateTheme) -- loads templates
	print("In loadTemplates function")
	if templateTheme == "Classic" then
		print("In the second code block")
		coreFunctions.isCurrentlyLoading = true
		-- Getting Folders
		local classicSceneryFolder = game.ReplicatedStorage.Sceneries.Classic
		local grassTemplates = classicSceneryFolder.obstacleTemplates.Grassfield
		local waterTemplates = classicSceneryFolder.obstacleTemplates.Water
		local roadTemplate = classicSceneryFolder.obstacleTemplates.Road
		local trainTracksTemplate = classicSceneryFolder.obstacleTemplates.TrainTracks
		local obstacleTemplates = classicSceneryFolder.obstacleTemplates
		
		-- Number Variables to track distances
		local studsPerTemplate = 12
		local templatesAhead = 15
		
		-- Other Variables
		local randomStartPlace = classicSceneryFolder.startPlace["startPlace"..math.random(1, #classicSceneryFolder.startPlace:GetChildren())]
		local characterSpawn = randomStartPlace.characterSpawn
		
		local function loadStartPlace()
			coreFunctions.startLoaded = true
			
			-- Adds copy to Workspace
			local startPlace = randomStartPlace:Clone()
			
			startPlace.Parent = game.Workspace
			-- Unanchors all the parts in the Base, and welds them to the characterSpawn
			for i, part in startPlace.Base:GetChildren() do
				local weld = Instance.new("WeldConstraint")
				weld.Parent = startPlace.characterSpawn
				weld.Part0 = part
				weld.Part1 = startPlace.characterSpawn
				part.Anchored = false
			end
			for i, prop in startPlace.Props:GetChildren() do
				for i, part in prop:GetChildren() do
					local weld = Instance.new("WeldConstraint")
					weld.Parent = startPlace.characterSpawn
					weld.Part0 = part
					weld.Part1 = startPlace.characterSpawn
					part.Anchored = false
				end
			end
			startPlace.PrimaryPart.CFrame = CFrame.new(Vector3.new(0,0,0))
		end
		
		local function loadObstacleTemplates()
			print("loading obstacles")
			
			local weldedObstacleTemplatesExists = game.ReplicatedStorage.Sceneries.Classic:FindFirstChild("obstacleTemplatesWelded")
			local obstacle
			
			if not weldedObstacleTemplatesExists then
				obstacle = obstacleTemplates:Clone()
				obstacle.Name = "obstacleTemplatesWelded"
				obstacle.Parent = obstacleTemplates.Parent
			elseif weldedObstacleTemplatesExists then
				obstacle = game.ReplicatedStorage.Sceneries.Classic:FindFirstChild("obstacleTemplatesWelded")
				coreFunctions.weldedTemplatesMade = true
			end
			
			-- Number Variables to generate a random number of templates at once
			local firstRoads = math.random(1,2)
			local secondRoads = math.random(2,3)
			local thirdRoads = math.random(2,4)
			local firstGrass = math.random(1,2)
			local firstTrains = math.random(1,2)
			local firstWater = math.random(2,4)
			
			local randomObstaclesTable = { -- first do roads (1-2), then grass (1-2), then roads (2-3). then train (1-2), then roads (2-4), then water (2-4)
				firstRoads,
				firstGrass,
				secondRoads,
				firstTrains,
				thirdRoads,
				1, -- for Lilypads
				1, -- for WaterLeft
				1, -- for WaterRight
				1 -- for Lilypads
			}
			
			-- Unanchor and Welding Phase
			if coreFunctions.weldedTemplatesMade == false then
				for i, templateFolder in obstacle:GetChildren() do
					-- Grass
					if templateFolder.Name == "Grassfield" then
						for i, grassField in templateFolder:GetChildren() do -- Entering Folder for access to the Base Models
							task.wait()
							for i, prop in grassField:GetChildren() do -- Entering the Base Models for access to the Individual Props
								task.wait()
								if prop:IsA("Model") then
									for i, part in prop:GetChildren() do -- Entering Prop for access to the Individual Parts
										local weld = Instance.new("WeldConstraint")
										weld.Part0 = part
										weld.Part1 = grassField.PrimaryPart
										weld.Parent = grassField.PrimaryPart
										part.Anchored = false
									end
								elseif prop.Name ~= "primaryPart" then
									local weld = Instance.new("WeldConstraint")
									weld.Part0 = prop
									weld.Part1 = grassField.PrimaryPart
									weld.Parent = grassField.PrimaryPart
									prop.Anchored = false
								end
							end
						end
					end
					-- Water
					if templateFolder.Name == "Water" then
						for i, propModels in templateFolder:GetChildren() do -- Entering Folder for access to Prop Models
							task.wait()
							for i, part in propModels:GetChildren() do -- Entering Prop Models for access to individual Parts
								task.wait()
								if part.Name ~= "primaryPart" then
									local weld = Instance.new("WeldConstraint")
									weld.Part0 = part
									weld.Part1 = propModels.PrimaryPart
									weld.Parent = propModels.PrimaryPart
									part.Anchored = false
								end
							end
						end
					end
					-- Road
					if templateFolder.Name == "Road" then
						for i, part in templateFolder:GetChildren() do
							task.wait()
							if part.Name ~= "primaryPart" then
								local weld = Instance.new("WeldConstraint")
								weld.Part0 = part
								weld.Part1 = templateFolder.PrimaryPart
								weld.Parent = templateFolder.PrimaryPart
								part.Anchored = false
							end
						end
					end
					-- Train
					if templateFolder.Name == "TrainTracks" then
						for i, prop in templateFolder:GetChildren() do
							task.wait()
							if prop:IsA("Model") then
								for i, part in prop:GetChildren() do
									local weld = Instance.new("WeldConstraint")
									weld.Part0 = part
									weld.Part1 = templateFolder.PrimaryPart
									part.Anchored = false
									weld.Parent = templateFolder.PrimaryPart
								end
							elseif prop ~= templateFolder.PrimaryPart then
								local weld = Instance.new("WeldConstraint")
								weld.Part0 = prop
								weld.Part1 = templateFolder.PrimaryPart
								prop.Anchored = false
								weld.Parent = templateFolder.PrimaryPart
							end
						end
					end
				end
				coreFunctions.weldedTemplatesMade = true
			end
			
			-- Duplication and Structure Phase
			local function spawnObstacles()
				print("spawning obstacles")
				
				-- Duplication Function
				local function duplicateObstacle(template, waterType, iterationOfDuplicate) -- Duplicate and store Templates in Folders to prep for installation
					if template:IsA("Model") then -- Model templates: Road, TrainTracks
						local newProp = obstacle[template.Name]:Clone()
						newProp.Level.Value.Value = coreFunctions.levelCounter
						coreFunctions.levelCounter += 1
						table.insert(coreFunctions.templatesTable, newProp)
						task.wait()
						if newProp.Name == "Road" then
							if iterationOfDuplicate == "first" then
								newProp.Parent = obstacle.duplicatedTemplates.firstRoads
								newProp.Name = "lvl"..tostring(newProp.Level.Value.Value)
							elseif iterationOfDuplicate == "second" then
								newProp.Parent = obstacle.duplicatedTemplates.SecondRoads
								newProp.Name = "lvl"..tostring(newProp.Level.Value.Value)
							elseif iterationOfDuplicate == "third" then
								newProp.Parent = obstacle.duplicatedTemplates.thirdRoads
								newProp.Name = "lvl"..tostring(newProp.Level.Value.Value)
							end
						elseif newProp.Name == "TrainTracks" then
							newProp.Parent = obstacle.duplicatedTemplates.firstTrains
							newProp.Name = "lvl"..tostring(newProp.Level.Value.Value)
						end
					elseif template:IsA("Folder") then -- Folder templates: Grassfield, Water
						if template.Name == "Grassfield" then
							local randomNumber = math.random(1,5)
							local duplicatedGrassfield = template["Grassfield"..tostring(randomNumber)]:Clone()
							duplicatedGrassfield.Level.Value.Value = coreFunctions.levelCounter
							coreFunctions.levelCounter += 1
							table.insert(coreFunctions.templatesTable, duplicatedGrassfield)
							task.wait()
							duplicatedGrassfield.Parent = obstacle.duplicatedTemplates.firstGrass
							duplicatedGrassfield.Name = "lvl"..tostring(duplicatedGrassfield.Level.Value.Value)
						elseif template.Name == "Water" then
							if waterType == "Lilypad" then
								local randomNumber = math.random(1,3)
								local duplicatedWater = template["Water"..tostring(randomNumber)]:Clone()
								duplicatedWater.Level.Value.Value = coreFunctions.levelCounter
								coreFunctions.levelCounter += 1
								table.insert(coreFunctions.templatesTable, duplicatedWater)
								task.wait()
								duplicatedWater.Name = "lvl"..tostring(duplicatedWater.Level.Value.Value)
								local hasLilypad1 = #obstacle.duplicatedTemplates.Lilypad1:GetChildren() > 0
								if hasLilypad1 then
									duplicatedWater.Parent = obstacle.duplicatedTemplates.Lilypad2
								elseif not hasLilypad1 then
									duplicatedWater.Parent = obstacle.duplicatedTemplates.Lilypad1
								end
							elseif waterType == "LogLeft" then
								local duplicatedWater = template.WaterLeft:Clone()
								duplicatedWater.Level.Value.Value = coreFunctions.levelCounter
								coreFunctions.levelCounter += 1
								table.insert(coreFunctions.templatesTable, duplicatedWater)
								task.wait()
								duplicatedWater.Parent = obstacle.duplicatedTemplates.WaterLeft
								duplicatedWater.Name = "lvl"..tostring(duplicatedWater.Level.Value.Value)
							elseif waterType == "LogRight" then
								local duplicatedWater = template.WaterRight:Clone()
								duplicatedWater.Level.Value.Value = coreFunctions.levelCounter
								coreFunctions.levelCounter += 1
								table.insert(coreFunctions.templatesTable, duplicatedWater)
								task.wait()
								duplicatedWater.Parent = obstacle.duplicatedTemplates.WaterRight
								duplicatedWater.Name = "lvl"..tostring(duplicatedWater.Level.Value.Value)
							end
						end
					end
				end
				
				-- Structure Function's Aid (Structures the duplicates)
				local function structureDuplicatedObstacles(structurableTemplate)
					task.wait(0.01)
					structurableTemplate.Parent = game.Workspace
					local templateLevel = structurableTemplate.Level.Value.Value
					local newPosition = coreFunctions.latestTemplateVector + Vector3.new(0,0,-12)
					print(tostring(coreFunctions.latestTemplateVector + Vector3.new(0,0,-12)), tostring(coreFunctions.latestTemplateVector))
					structurableTemplate.PrimaryPart.CFrame = CFrame.new(newPosition)
					coreFunctions.latestTemplateVector = structurableTemplate.PrimaryPart.CFrame.Position -- Updates latestTemplateVector
					if templateLevel > coreFunctions.highestTemplateLevel then
						coreFunctions.highestTemplateLevel = structurableTemplate.Level.Value.Value
					end
				end
				
				local templateOrder = 1 -- Variable to get the right order of template

				-- Structure Function (Iterates through the duplicates)
				local function structureObstacles()
					print("structuring obstacles")
					if templateOrder == 1 then
						for iteration, road in obstacle.duplicatedTemplates.firstRoads:GetChildren() do
							structureDuplicatedObstacles(road)
						end
						templateOrder += 1
					elseif templateOrder == 2 then
						for iteration, grassfield in obstacle.duplicatedTemplates.firstGrass:GetChildren() do
							structureDuplicatedObstacles(grassfield)
						end
						templateOrder += 1
					elseif templateOrder == 3 then
						for iteration, road in obstacle.duplicatedTemplates.SecondRoads:GetChildren() do
							structureDuplicatedObstacles(road)
						end
						templateOrder += 1
					elseif templateOrder == 4 then
						for iteration, train in obstacle.duplicatedTemplates.firstTrains:GetChildren() do
							structureDuplicatedObstacles(train)
						end
						templateOrder += 1
					elseif templateOrder == 5 then
						for iteration, road in obstacle.duplicatedTemplates.thirdRoads:GetChildren() do
							structureDuplicatedObstacles(road)
						end
						templateOrder += 1
					elseif templateOrder == 6 then
						for iteration, lilypad in obstacle.duplicatedTemplates.Lilypad1:GetChildren() do
							structureDuplicatedObstacles(lilypad)
						end
						templateOrder += 1
					elseif templateOrder == 7  then
						for iteration, water in obstacle.duplicatedTemplates.WaterLeft:GetChildren() do
							structureDuplicatedObstacles(water)
						end
						templateOrder += 1
					elseif templateOrder == 8  then
						for iteration, water in obstacle.duplicatedTemplates.WaterRight:GetChildren() do
							structureDuplicatedObstacles(water)
						end
						templateOrder += 1
					elseif templateOrder == 9 then
						for iteration, lilypad in obstacle.duplicatedTemplates.Lilypad2:GetChildren() do
							structureDuplicatedObstacles(lilypad)
						end
						templateOrder = 1
					end
				end
				
				-- Duplication Iterator
				for i, v in randomObstaclesTable do
					-- firstRoads
					if i == 1 then
						for iteration = 1, v do
							duplicateObstacle(obstacle.Road, "None", "first")-- Make sure to call the template
						end
					-- firstGrass
					elseif i == 2 then
						for iteration = 1, v do
							duplicateObstacle(obstacle.Grassfield, "None", "first")-- Make sure to call the template
						end
					-- secondRoads
					elseif i == 3 then
						for iteration = 1, v do
							duplicateObstacle(obstacle.Road, "None", "second")-- Make sure to call the template
						end
					-- firstTrains
					elseif i == 4 then
						for iteration = 1, v do
							duplicateObstacle(obstacle.TrainTracks, "None", "first")-- Make sure to call the template
						end
					-- thirdRoads
					elseif i == 5 then
						for iteration = 1, v do
							duplicateObstacle(obstacle.Road, "None", "third")-- Make sure to call the template
						end
					-- firstWater
					elseif i == 6 then
						duplicateObstacle(obstacle.Water, "Lilypad", "first")-- Make sure to call the template
					elseif i == 7 then
						for iteration = 1, v do
							duplicateObstacle(obstacle.Water, "LogLeft", "none")-- Make sure to call the template
						end
					elseif i == 8 then
						for iteration = 1, v do
							duplicateObstacle(obstacle.Water, "LogRight", "none")-- Make sure to call the template
						end
					elseif i == 9 then
						for iteration = 1, v do
							duplicateObstacle(obstacle.Water, "Lilypad", "none")-- Make sure to call the template
						end
					end
				end
				
				-- Structure Iterator
				for iteration = 1, 9 do
					structureObstacles()
				end
			end
			spawnObstacles()
		end
		
		local startPlaceLoaded = coreFunctions.startLoaded
		if not startPlaceLoaded then
			loadStartPlace()
		end
		
		for iteration = 1, 5 do
			if tracker.Booleans.playerIsDead.Value == false then
				loadObstacleTemplates()
			elseif tracker.Booleans.playerIsDead.Value == true then
				print("Player is dead, breaking loadObstableTemplates loop"..tostring(game.ReplicatedStorage.Trackers.Booleans.playerIsDead.Value))
				coreFunctions.levelCounter = 0
				coreFunctions.latestTemplateVector = Vector3.new(0,0,0)
				break
			end
			if iteration == 5 then
				print(coreFunctions.templateBin)
				coreFunctions.clearTemplateBin()
				print("Bin has been cleared.")
			end
		end
		coreFunctions.isCurrentlyLoading = false
		print("At the end")
	end
end

-- Fading Functions:
coreFunctions.fadeIn = function(screenGui)
	local background = screenGui.Background
	background.Transparency = 1
	screenGui.Enabled = true
	local function shiftTransparency()
		for i = 1, 100 do
			background.Transparency = 1 - i*0.01
			task.wait(0.01)
		end
	end
	shiftTransparency()
end
coreFunctions.fadeOut = function(screenGui)
	local background = screenGui.Background
	background.Transparency = 0
	screenGui.Enabled = true
	local function shiftTransparency()
		for i = 1, 100 do
			background.Transparency = 0 + i*0.01
			task.wait(0.01)
		end
	end
	shiftTransparency()
	screenGui.Enabled = false
end

-- PlayAgainGui Functions:
coreFunctions.openPlayAgainGui = function()
	local PlayAgainGui = game.Players.LocalPlayer.PlayerGui.playAgainGui
	print("Opening Play Again Gui")
	PlayAgainGui.TextButton.Transparency = 1
	PlayAgainGui.Enabled = true
	for i = 1, 100 do
		PlayAgainGui.TextButton.Transparency = 1 - i*0.01
		task.wait(0.001)
	end
	PlayAgainGui.TextButton.Active = true
end
coreFunctions.closePlayAgainGui = function()
	local PlayAgainGui = game.Players.LocalPlayer.PlayerGui.playAgainGui
	print("Closing Play Again Gui")
	PlayAgainGui.Enabled = false
end

-- Refresh Functions:
coreFunctions.resetPlayerLevel = function()
	coreFunctions.playerLevel = 0
end
coreFunctions.resetPlayerPosition = function()
	game.Workspace.Player:SetPrimaryPartCFrame(CFrame.new(Vector3.new(0,3,0)) * CFrame.Angles(0,0,0))
	game.Workspace.Player.CharacterSpace.Position = Vector3.new(0,0,0)
	game.Workspace.Player.CameraFocus.Position = Vector3.new(3.4, 16.3, -2)
	game.Workspace.Player.playerModel.CharacterPart.Position = Vector3.new(0,3,0)
	print("Player's position has been reset")
end
coreFunctions.resetLatestTemplateVector = function()
	coreFunctions.latestTemplateVector = Vector3.new(0,0,0)
end
coreFunctions.resetLevelCounter = function()
	coreFunctions.levelCounter = 1
end
coreFunctions.clearAllTemplates = function()
	repeat
		task.wait()
	until coreFunctions.isCurrentlyLoading == false
	
	for i, v in coreFunctions.templatesTable do
		local alreadyInBin = table.find(coreFunctions.templateBin, v)
		if not alreadyInBin then
			table.insert(coreFunctions.templateBin, v)
		end
		task.wait(0.01)
	end
	coreFunctions.clearTemplateBin()
	print("All templates cleared")
end
-- generalRefresh
coreFunctions.generalRefresh = function()
	coreFunctions.currentlyRefreshing = true
	coreFunctions.resetPlayerPosition()
	coreFunctions.resetPlayerLevel()
	coreFunctions.resetLevelCounter()
	coreFunctions.resetLatestTemplateVector()
	coreFunctions.clearAllTemplates()
	coreFunctions.currentlyRefreshing = false
end


return coreFunctions
