The function first checks for the version from the first parameter.


                                                                        "Classic"

    It then sets coreFunctions.isCurrentlyLoading to true

    It collects a bunch of variable, such as: 
        randomStartPlace -- Finds a random start place within classicSceneryFolder.startPlace
        studsPerTemplate -- Gets the amount of studs to move to one point. (normally 12 studs)
        obstacleTemplates -- Ranges from roads, grassfields traintracks, water.
        (etc. etc.)
        
    Documentation of the function: loadStart()
      the function sets coreFunctions.startLoaded to true so that when loadTemplates() is called again, it's sure whether or not it should load the 
      startplace with the variable startPlace, the randomly picked start place gets cloned and parented to the workspace.
      The loadStart() function then Unanchors and Welds the individual parts of the startPlace to the characterSpawn. (Should probably manually fix
                                                                                                                    this to enhance speed.)
                                                                                                                    
    Documentation of the function: loadObstacleTemplates()
      the function will first check if weldedObstacleTemplatesExists is true (This variable should refer to the copy of the obstacleTemplates Folder,
                                                                 but with almost all the components unanchored and welded to their respective PrimaryPart,
                                                                 which makes it a whole lot easier to change the template's position.)
                                                                 
        if weldedObstacleTemplatesExists is false, then the function will clone obstacleTemplates, rename the clone to "obstacleTemplatesWelded",
        and finally parent it to the same Folder as obstacleTemplates.
        
        Else if weldedObstacleTemplatesExists is true, it will simply store it in the variable "obstacle" for the rest of the code block's script to use.
        
        the function will then have an organization of variables that control the pattern of the templates being laid out. Stuff like the random amount
        of the same template, and the other being a table with a structured pattern of which goes next, and how often in 1 loop.

        If the welded templates weren't already made before, then the version we have just cloned may not have been unanchored and welded,
        if that's the case, then we would go through a phase that Unanchors and Welds our templates.
        
        Documentation of the function: spawnObstacles()
        
          This function clones templates from the object variable (which is simply a variable that stores a folde containing the unanchored and welded
          templates), and then structure them into workspace in the right order. 
        
          Documentation of the function: duplicateObstacle()
          
            This function has 3 Parameters:{
            
            template: This parameter is used to detect if the template given is a model (a template with only 1 of its type, like a road or train track),
            or if the given template is a folder (a template with many differenct types, like grassfields or water templates)
            
            waterType: If the obstacle to be duplicated is a type of water, we'll have to know what type of water it is so that we can clone the right
            one (Lilypad, LogLeft, LogRight)
            
            iterationOfDuplicate: This parameter helps assist with the batch of roads to deploy (first, second third)
            }
            
            The function basically duplicates a template, gives it a level, then parents it to a folder to be structured later on.
            If the template is a model, then the process is obvious enough. So I'll just go over the part of code where the template is a folder.
            
            Unlike the code block for the model template which is able to clone a template immediately since we already know it's parent,
            the folder template type has a lot of the same class of templates. So before we clone it, we'll have to dig a little deeper using the name 
            of the folder, then randomly select a number to randomly pick one of the various templates to clone and manage.
            
          Documentation of the function: structureDuplicatedObstacles()
            
            This function has 1 Parameter:{
            
            structurableTemplate: This is the template that this function is assigned to structure
            }
            
            This function has the core process of structuring a template.
            
            The function first parents the template to workspace. It then moves it's coordinate 12 studs ahead of the previous latest template.
            It then updates the latestTemplateVector variable to ofcourse make sure that the next template knows where the previous template landed.
            If the template level is the highest, it will update the variable: highestTemplateLevel (Which has no use just yet as of Jan 21, 2022)
            
          Documentation of the function: structureObstacles()
          
            This function simply iterates through the function: structureDuplicatedObstacles(), about 9 times.
            Depending on the variable: templateOrder, the function will loop through one of the duplicated folders, and continuously call the function:
            structureDuplicatedObstacles(), which then structures all the templates inside the "duplicated folder".
          
          >>Enough with the functions. in this phase, we will finally duplicate and structure the templates<<
          
          <<Duplication iterator>>:
            
            It will loop through the table: randomObstaclesTable.
            Then depending on the iteration, it will enter another for loop for that specific element, and depending on the value (which is a given number)
            of the element, it will continuously duplicate that template. Using the iterator as to what template, and the element value to know how many
            times to duplicate that template. Simple, but unreliable if ever we need changes with the order of templates.
          
            
          <<Structure iterator>>:
          
            This iterator iterates through the function: structureObstacles(). It simply structures the templates by moving them from the duplicated
            folder to workspace, and some other configurations.
        
        The function then calls the function: spawnObstacles(), Which duplicates and structures the templates.
        
    The function then calls another function: loadStart(). That is, if it wasn't already called before.
    
    The function then loops 5 times:
        If the player isn't dead (checked with: tracker.Booleans.playerIsDead.Value == false), then it will call the function: loadObstacleTemplates.
                                                                                                    
        Else if the player is dead during the checking from this loop, it will reset coreFunctions.levelCounter = 0, and coreFunctions.latestTemplateVector
        It will then break the for loop
        
        If this is the last iteration, it will clear the templates bin with the function: coreFunctions.clearTemplateBin(), which dumps the templates
                                                                                          that have been binned before loadTemplates() was called.
                                                                                          
     Once the function has finally reached the very end, it will set coreFunctions.isCurrentlyLoading to false to allow the function:
     coreFunctions.clearAllTemplates, to begin the process of binning, then clearing the templates.
                                                                                          
